/*
 * FixScript IO v0.8 - https://www.fixscript.org/
 * Copyright (c) 2019-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

use "classes";

import "io/stream";
import "io/async";

class TCPConnection: Stream
{
	var @handle;

	constructor open(hostname: String, port: Integer)
	{
		handle = @tcp_connection_open(hostname, port);
	}

	override function close()
	{
		@tcp_connection_close(handle);
	}
	
	override function read_part(buf: Byte[], off: Integer, len: Integer): Integer
	{
		return @tcp_connection_read(handle, buf, off, len, -1);
	}

	override function write_part(buf: Byte[], off: Integer, len: Integer): Integer
	{
		return @tcp_connection_write(handle, buf, off, len, -1);
	}
	
	function read_part(buf: Byte[], off: Integer, len: Integer, timeout: Integer): Integer
	{
		return @tcp_connection_read(handle, buf, off, len, timeout);
	}

	function write_part(buf: Byte[], off: Integer, len: Integer, timeout: Integer): Integer
	{
		return @tcp_connection_write(handle, buf, off, len, timeout);
	}
}

class TCPServer
{
	static function create(port: Integer): TCPServer;
	static function create_local(port: Integer): TCPServer;
	function close();

	function accept(): TCPConnection
	{
		return accept(-1);
	}
	
	function accept(timeout: Integer): TCPConnection
	{
		var handle = @tcp_server_accept(this, timeout);
		if (!handle) return null;
		var conn = new TCPConnection: Stream::create();
		conn.handle = handle;
		return conn;
	}
}

//function open_callback(data, conn);

class AsyncTCPConnection: AsyncStream
{
	var @handle;

	constructor @create(handle)
	{
		this.handle = handle;
	}

	constructor open(hostname: String, port: Integer, callback, data)
	{
		handle = @async_tcp_connection_open(hostname, port, AsyncTCPConnection::wrap_connection#2, [callback, data]);
	}

	static function @wrap_connection(data, conn)
	{
		if (conn) {
			conn = create(conn);
		}
		data[0](data[1], conn);
	}

	override function read(buf: Byte[], off: Integer, len: Integer, callback, data)
	{
		@async_tcp_connection_read(handle, buf, off, len, callback, data);
	}

	override function write(buf: Byte[], off: Integer, len: Integer, callback, data)
	{
		@async_tcp_connection_write(handle, buf, off, len, callback, data);
	}
	
	override function close()
	{
		@async_tcp_connection_close(handle);
	}
}

//function accept_callback(data, conn);

class AsyncTCPServer
{
	var @handle;

	constructor create(port: Integer)
	{
		handle = @async_tcp_server_create(port);
	}

	constructor create_local(port: Integer)
	{
		handle = @async_tcp_server_create_local(port);
	}

	function close()
	{
		@async_tcp_server_close(handle);
	}
	
	function accept(callback, data)
	{
		@async_tcp_server_accept(handle, AsyncTCPServer::wrap_connection#2, [callback, data]);
	}

	static function @wrap_connection(data, conn)
	{
		data[0](data[1], AsyncTCPConnection::create(conn));
	}
}

function @tcp_connection_open(hostname, port);
function @tcp_connection_close(handle);
function @tcp_connection_read(handle, buf, off, len, timeout);
function @tcp_connection_write(handle, buf, off, len, timeout);
function @tcp_server_accept(handle, timeout);

function @async_tcp_connection_open(hostname, port, callback, data);
function @async_tcp_connection_read(handle, buf, off, len, callback, data);
function @async_tcp_connection_write(handle, buf, off, len, callback, data);
function @async_tcp_connection_close(handle);

function @async_tcp_server_create(port);
function @async_tcp_server_create_local(port);
function @async_tcp_server_close(handle);
function @async_tcp_server_accept(handle, callback, data);
