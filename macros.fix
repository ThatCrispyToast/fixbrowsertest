/*
 * FixScript Macros v0.6 - https://www.fixscript.org/
 * Copyright (c) 2019-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

/*----------------------------------------------------------------------------

This token processor allows to define macros and paste them as tokens directly
into the place of use. You can optionally use parameters to further customize
the pasted tokens.

There is a support for temporary names unique to each invocation of the macro.
Macros (including the declarations) are processed recursivelly.

Parameters can be marked with '&' to document they're output parameters, it is
then required to also mark it at the invocation.

Defined macros can be scoped, they're contained within blocks defined by
'{' and '}' symbols. Macros can be private to a script (by using @ before the
name).

You can define a top-level function (including from inside a macro) using
"macro function" keywords.

In the case the macros are not sufficient you can directly generate code using
a code. Just use the 'generate { ... }' construct. You can output the generated
source code using the 'output' function.

The output function can be also used as a statement to not require extra
string escaping. You can use '$(...)' to put in expressions to evaluate
(the return value will be converted to a string and tokenized) or '${...}'
to concatenate values into a string that will be put as a string literal.

You can use the 'unique' function to return an unique positive integer to avoid
collisions for names.

Each generate statement can specify token processors and/or imports at the
beginning of the body. However the support is limited as there is no way to
define top-level statements.

You can concatenate tokens using '#' symbol. The first token must be an
identifier (or a keyword). Otherwise the '#' symbol will create a string
literal containing the tokens separated by spaces.

Example:

  use "macros";

  macro some_macro(a, b, c, &out)
  {
      var $tmp_name = a, $other = c, out;
      var prefix_#b, b#_suffix;
      log({"param=", $tmp_name});
      log(#c);
  }

  some_macro("test", aaa, 1+2*3, &bbb);

  generate {
      for (var i=0; i<5; i++) {
          output {
              log(${"generated=", i});
          }
      }
  }

This is expanded to:

  var _macro_tmp_1_0 = "test", _macro_tmp_1_1 = 1+2*3, bbb;
  var prefix_aaa, aaa_suffix;
  log({"param=", _macro_tmp_1_0});
  log("1 + 2 * 3");

  log("generated=0");
  log("generated=1");
  log("generated=2");
  log("generated=3");
  log("generated=4");

----------------------------------------------------------------------------*/

const {
	@TOK_IDENT,
	@TOK_FUNC_REF,
	@TOK_NUMBER,
	@TOK_HEX_NUMBER,
	@TOK_FLOAT_NUMBER,
	@TOK_CHAR,
	@TOK_STRING,
	@TOK_UNKNOWN,

	@KW_DO,
	@KW_IF,
	@KW_FOR,
	@KW_USE,
	@KW_VAR,
	@KW_CASE,
	@KW_ELSE,
	@KW_BREAK,
	@KW_CONST,
	@KW_WHILE,
	@KW_IMPORT,
	@KW_RETURN,
	@KW_SWITCH,
	@KW_DEFAULT,
	@KW_CONTINUE,
	@KW_FUNCTION
};

const {
	@TOK_type,
	@TOK_off,
	@TOK_len,
	@TOK_line,
	@TOK_SIZE
};

const {
	@MACRO_num_params,
	@MACRO_output_mask,
	@MACRO_tokens,
	@MACRO_src,
	@MACRO_table,
	@MACRO_SIZE
};

const {
	@FLAG_PASTE       = 0x40000000,
	@FLAG_TMP_NAME    = 0x20000000,
	@FLAG_FUNC_REF    = 0x10000000,
	@FLAG_PARAM_MASK  = 0x0FF00000,
	@FLAG_VALUE_MASK  = 0x000FFFFF,
	@FLAG_PARAM_SHIFT = 20
};

var @macros;
var @temp_name_cnt;

function @get_macro_key(name)
{
	return name[0] | (length(name) << 8);
}

function process_tokens(fname, tokens, src)
{
	if (!macros) {
		macros = {};
	}
	var cur_macros = {};
	macros{fname} = cur_macros;

	var level = 0;
	var scoped = [];
	
	var tokens_stack = [];
	var new_tokens = [];
	var global_tokens = tokens;
	var generate_common_tokens;
	var tokens_start = 0;
	var i = 0;
	
	for (;;) {
		for (; i<length(tokens); i+=TOK_SIZE) {
			switch (tokens[i]) {
				case '{':
					level++;
					continue;

				case '}': {
					var pos = length(scoped) - 3;
					if (pos >= 0) {
						do {
							if (scoped[pos+0] < level) break;
							var macro_name = scoped[pos+1];
							var prev_macro = scoped[pos+2];
							if (prev_macro) {
								cur_macros{macro_name} = prev_macro;
							}
							else {
								hash_remove(cur_macros, macro_name);
								var key = get_macro_key(macro_name);
								var cnt = cur_macros{key} - 1;
								if (cnt == 0) {
									hash_remove(cur_macros, key);
								}
								else {
									cur_macros{key} = cnt;
								}
							}
							pos -= 3;
						}
						while (pos >= 0);
						array_set_length(scoped, pos+3);
					}
					level--;
					continue;
				}

				case TOK_IDENT: {
					var off = tokens[i+TOK_off];
					var len = tokens[i+TOK_len];
					var first = src[off];
					if (len == 5 && first == 'm' && src[++off] == 'a' && src[++off] == 'c' && src[++off] == 'r' && src[++off] == 'o') {
						if (i > tokens_start) {
							array_append(new_tokens, tokens, tokens_start, i-tokens_start);
						}
						var is_scoped = (level > 0);
						i += TOK_SIZE;
						if (tokens[i] == '@') {
							is_scoped = true;
						}
						else {
							i -= TOK_SIZE;
						}
						if (is_scoped) {
							scoped[] = level;
						}
						i = define_macro(tokens, src, i += TOK_SIZE, cur_macros, is_scoped? scoped : null, global_tokens);
						tokens_start = i;
						i -= TOK_SIZE;
						continue;
					}
					else if (len == 8 && first == 'g' && src[++off] == 'e' && src[++off] == 'n' && src[++off] == 'e' && src[++off] == 'r' && src[++off] == 'a' && src[++off] == 't' && src[++off] == 'e') {
						if (!generate_common_tokens) {
							generate_common_tokens = [];
						}
						process_generate(fname, tokens, src, i+TOK_SIZE, generate_common_tokens) - TOK_SIZE;
						i -= TOK_SIZE;
						continue;
					}
					else if (hash_contains(cur_macros, first | (len << 8))) { // inlined from get_macro_key
						var value = array_extract(src, off, len);
						var macro = hash_get(cur_macros, value, null);
						if (macro) {
							if (i > tokens_start) {
								array_append(new_tokens, tokens, tokens_start, i-tokens_start);
							}
							var replaced_tokens = [];
							i = replace_macro(tokens, replaced_tokens, src, macro, i);
							tokens_stack[] = tokens;
							tokens_stack[] = i;
							tokens = replaced_tokens;
							tokens_start = 0;
							i = -TOK_SIZE;
							continue;
						}
					}
					continue;
				}

				case KW_IMPORT: {
					i += TOK_SIZE;
					if (tokens[i] != TOK_STRING) {
						return 0, error({script_line(tokens[i+TOK_line]), ": expected import name"});
					}
					var value = array_extract(src, tokens[i+TOK_off], tokens[i+TOK_len]);
					var import_fname = {""};
					script_query(token_parse_string(value), import_fname, null, null, null);
					var import_macros = hash_get(macros, import_fname, null);
					if (import_macros) {
						for (var j=0; j<length(import_macros); j++) {
							var (k, v) = hash_entry(import_macros, j);
							if (is_string(k) && !hash_contains(cur_macros, k)) {
								cur_macros{k} = v;
								var key = get_macro_key(k);
								cur_macros{key} = hash_get(cur_macros, key, 0)+1;
							}
						}
					}
					continue;
				}
			}
		}

		if (i > tokens_start) {
			array_append(new_tokens, tokens, tokens_start, i-tokens_start);
		}

		var off = length(tokens_stack)-2;
		if (off >= 0) {
			tokens = tokens_stack[off+0];
			i = tokens_stack[off+1];
			array_set_length(tokens_stack, off);
			tokens_start = i;
			continue;
		}
		break;
	}

	for (var pos=length(scoped)-3; pos>=0; pos-=3) {
		var macro_name = scoped[pos+1];
		var prev_macro = scoped[pos+2];
		if (prev_macro) {
			cur_macros{macro_name} = prev_macro;
		}
		else {
			hash_remove(cur_macros, macro_name);
			var key = get_macro_key(macro_name);
			var cnt = cur_macros{key} - 1;
			if (cnt == 0) {
				hash_remove(cur_macros, key);
			}
			else {
				cur_macros{key} = cnt;
			}
		}
	}

	if (length(cur_macros) == 0) {
		hash_remove(macros, fname);
	}

	array_replace_range(tokens, 0, length(tokens), new_tokens);
}

function @define_macro(tokens, src, off, cur_macros, scoped, global_tokens)
{
	if (tokens[off] == KW_FUNCTION) {
		var start_off = off;
		off += TOK_SIZE;
		if (off >= length(tokens)) {
			off -= TOK_SIZE;
			return 0, error({script_line(tokens[off+TOK_line]), ": unexpected EOF"});
		}
		var level = 0, end = false;
		while (off < length(tokens)) {
			switch (tokens[off]) {
				case '{':
					if (level == 0) {
						end = true;
						break;
					}
					// fallthrough
				case '(', '[':
					level++;
					break;
				case '}', ')', ']':
					level--;
					break;
			}
			if (end) break;
			off += TOK_SIZE;
		}
		if (off >= length(tokens)) {
			off -= TOK_SIZE;
			return 0, error({script_line(tokens[off+TOK_line]), ": unexpected EOF"});
		}
		level = 0;
		while (off < length(tokens)) {
			switch (tokens[off]) {
				case '{', '(', '[':
					level++;
					break;
				case '}', ')', ']':
					level--;
					break;
			}
			if (level == 0) break;
			off += TOK_SIZE;
		}
		if (off >= length(tokens)) {
			off -= TOK_SIZE;
			return 0, error({script_line(tokens[off+TOK_line]), ": unexpected EOF"});
		}
		if (tokens[off] != '}') {
			return 0, error({script_line(tokens[off+TOK_line]), ": expected '}'"});
		}
		var func_tokens = array_extract(tokens, start_off, off+TOK_SIZE-start_off);
		array_append(global_tokens, func_tokens);
		return off + TOK_SIZE;
	}

	if (tokens[off] != TOK_IDENT) {
		return 0, error({script_line(tokens[off+TOK_line]), ": expected macro name"});
	}

	var name = array_extract(src, tokens[off+TOK_off], tokens[off+TOK_len]);
	var params = null;
	var output_mask = 0;

	off += TOK_SIZE;
	if (tokens[off] == '(') {
		params = {};

		off += TOK_SIZE;
		if (tokens[off] != ')') {
			for (;;) {
				if (tokens[off] == '&') {
					var num = length(params);
					if (num >= 32) {
						return 0, error({script_line(tokens[off+TOK_line]), ": output parameter can be at most at the 32th position"});
					}
					output_mask |= 1 << num;
					off += TOK_SIZE;
				}
				if (tokens[off] != TOK_IDENT) {
					return 0, error({script_line(tokens[off+TOK_line]), ": expected parameter name or ')'"});
				}
				var param_name = array_extract(src, tokens[off+TOK_off], tokens[off+TOK_len]);
				params{param_name} = length(params);

				off += TOK_SIZE;
				var symbol = tokens[off];
				if (symbol == ',') {
					off += TOK_SIZE;
					continue;
				}
				if (symbol == ')') {
					off += TOK_SIZE;
					break;
				}
				return 0, error({script_line(tokens[off+TOK_line]), ": expected ',' or ')'"});
			}
		}
		else {
			off += TOK_SIZE;
		}
	}

	if (tokens[off] != '{') {
		return 0, error({script_line(tokens[off+TOK_line]), ": expected '{'"});
	}
	off += TOK_SIZE;

	var level = 1;
	var macro_tokens = [];
	var macro_src = {""};
	var macro_table = [];
	var last = off;
	var paste_flag = 0, paste_flag2 = 0;
	var tmp_names = {};

	while (off < length(tokens)) {
		switch (tokens[off]) {
			case '{', '(', '[':
				level++;
				break;

			case '}', ')', ']':
				level--;
				break;

			case '$': {
				if ((off+TOK_SIZE) >= length(tokens) || (tokens[off+TOK_SIZE] != TOK_IDENT && tokens[off+TOK_SIZE] != TOK_FUNC_REF)) {
					break;
				}
				if (off > last) {
					macro_table[] = -((off - last) | paste_flag2);
					paste_flag2 = 0;
				}
				off += TOK_SIZE;
				var tmp_name = array_extract(src, tokens[off+TOK_off], tokens[off+TOK_len]);
				var func_ref = (tokens[off] == TOK_FUNC_REF);
				var num_params = -1;
				if (func_ref) {
					for (var i=length(tmp_name)-1; i>=0; i--) {
						if (tmp_name[i] == '#') {
							num_params = string_parse_int(tmp_name, i+1, length(tmp_name)-i-1);
							array_set_length(tmp_name, i);
							break;
						}
					}
				}
				var num = hash_get(tmp_names, tmp_name, -1);
				if (num < 0) {
					num = length(tmp_names);
					tmp_names{tmp_name} = num;
				}
				var flags = num | FLAG_TMP_NAME;
				if (func_ref) {
					flags |= (num_params << FLAG_PARAM_SHIFT) | FLAG_FUNC_REF;
				}
				macro_table[] = flags;
				off += TOK_SIZE;
				last = off;
				continue;
			}

			case '#':
				if (off == 0) {
					return 0, error({script_line(tokens[off+TOK_line]), ": macro can't start with paste operator"});
				}
				if (off == last) {
					paste_flag2 = FLAG_PASTE;
					off += TOK_SIZE;
					last += TOK_SIZE;
					continue;
				}

				if ((off += TOK_SIZE) >= length(tokens) || tokens[off] != TOK_IDENT) {
					return 0, error({script_line(tokens[off-TOK_SIZE+TOK_line]), ": expected macro parameter"});
				}
				paste_flag = FLAG_PASTE;

				// fallthrough

			case TOK_IDENT: {
				var value = array_extract(src, tokens[off+TOK_off], tokens[off+TOK_len]);
				var param = hash_get(params, value, -1);
				if (param >= 0) {
					if (paste_flag) {
						off -= TOK_SIZE;
					}
					if (off > last) {
						macro_table[] = -((off - last) | paste_flag2);
						paste_flag2 = 0;
					}
					if (paste_flag) {
						off += TOK_SIZE;
					}
					macro_table[] = param | paste_flag;
					paste_flag = 0;
					off += TOK_SIZE;
					last = off;
					continue;
				}
				else if (paste_flag) {
					return 0, error({script_line(tokens[off+TOK_line]), ": expected macro parameter"});
				}
				break;
			}
		}
		
		if (level == 0) break;

		macro_tokens[] = tokens[off++];
		var token_off = tokens[off++];
		var src_pos = length(macro_src);
		macro_tokens[] = src_pos;
		var token_len = tokens[off++];
		macro_tokens[] = token_len;
		macro_tokens[] = tokens[off++];
		array_set_length(macro_src, src_pos + token_len);
		array_copy(macro_src, src_pos, src, token_off, token_len);
	}

	if (off > last) {
		macro_table[] = -((off - last) | paste_flag2);
	}

	var macro = object_create(MACRO_SIZE);
	macro->MACRO_num_params = params? length(params) : -1;
	macro->MACRO_output_mask = output_mask;
	macro->MACRO_tokens = macro_tokens;
	macro->MACRO_src = macro_src;
	macro->MACRO_table = macro_table;
	if (scoped) {
		scoped[] = name;
		scoped[] = hash_get(cur_macros, name, null);
	}

	if (!hash_contains(cur_macros, name)) {
		var key = get_macro_key(name);
		cur_macros{key} = hash_get(cur_macros, key, 0)+1;
	}

	cur_macros{name} = macro;

	return off + TOK_SIZE;
}

function @replace_macro(tokens, new_tokens, src, macro, off)
{
	var start = off;
	var line = tokens[off+TOK_line];

	var params = null;
	var output_mask = macro->MACRO_output_mask;
	temp_name_cnt++;

	if (macro->MACRO_num_params >= 0) {
		params = [];

		off += TOK_SIZE;
		if (tokens[off] != '(') {
			return 0, error({script_line(tokens[off+TOK_line]), ": expected '('"});
		}

		off += TOK_SIZE;
		for (var i=0; i<macro->MACRO_num_params; i++) {
			if (i > 0) {
				if (tokens[off] != ',') {
					return 0, error({script_line(tokens[off+TOK_line]), ": expected ','"});
				}
				off += TOK_SIZE;
			}
			if (i < 32 && (output_mask & (1 << i))) {
				if (tokens[off] != '&') {
					return 0, error({script_line(tokens[off+TOK_line]), ": expected '&' to document output parameter"});
				}
				off += TOK_SIZE;
			}
			var param_start = off;
			off = find_param_end(tokens, src, off);
			params[] = param_start;
			params[] = off - param_start;
		}

		if (tokens[off] != ')') {
			return 0, error({script_line(tokens[off+TOK_line]), ": expected ')'"});
		}
	}

	var end = off + TOK_SIZE;

	var macro_tokens = macro->MACRO_tokens;
	var table = macro->MACRO_table;
	var idx = 0;
	
	var src_off = length(src);
	array_append(src, macro->MACRO_src);

	for (var i=0; i<length(table); i++) {
		var data = table[i];
		if (data < 0) {
			var len = (-data) & FLAG_VALUE_MASK;
			if ((-data) & FLAG_PASTE) {
				var last_pos = length(new_tokens) - TOK_SIZE;
				var tmp_off = length(src);
				var before_len = new_tokens[last_pos+TOK_len];
				var paste_len = macro_tokens[idx+TOK_len];
				var total_len = before_len + paste_len;
				array_set_length(src, tmp_off + total_len);
				array_copy(src, tmp_off, src, new_tokens[last_pos+TOK_off], before_len);
				array_copy(src, tmp_off + before_len, macro->MACRO_src, macro_tokens[idx+TOK_off], paste_len);
				new_tokens[last_pos+TOK_off] = tmp_off;
				new_tokens[last_pos+TOK_len] = total_len;
				idx += TOK_SIZE;
				len -= TOK_SIZE;
			}
			for (var j=len/4; j; j--) {
				new_tokens[] = macro_tokens[idx++];
				new_tokens[] = macro_tokens[idx++] + src_off;
				new_tokens[] = macro_tokens[idx++];
				new_tokens[] = line;
				idx++;
			}
		}
		else {
			if (data & FLAG_TMP_NAME) {
				var name = {"_macro_tmp_", temp_name_cnt, "_", data & FLAG_VALUE_MASK};
				var func_ref = data & FLAG_FUNC_REF;
				if (func_ref) {
					array_append(name, {"#", (data & FLAG_PARAM_MASK) >> FLAG_PARAM_SHIFT});
				}
				var tmp_off = length(src);
				array_append(src, name);
				new_tokens[] = func_ref? TOK_FUNC_REF : TOK_IDENT;
				new_tokens[] = tmp_off;
				new_tokens[] = length(name);
				new_tokens[] = line;
				continue;
			}
			
			var param_num = data & FLAG_VALUE_MASK;
			var param_off = params[param_num*2+0];
			var param_len = params[param_num*2+1];

			if (data & FLAG_PASTE) {
				var last_pos = length(new_tokens) - TOK_SIZE;
				switch (new_tokens[last_pos]) {
					case TOK_IDENT, KW_DO .. KW_FUNCTION: {
						if (param_len != TOK_SIZE) {
							return 0, error({script_line(line), ": only single tokens can be pasted"});
						}
						var tmp_off = length(src);
						var before_len = new_tokens[last_pos+TOK_len];
						var paste_len = tokens[param_off+TOK_len];
						var total_len = before_len + paste_len;
						array_set_length(src, tmp_off + total_len);
						array_copy(src, tmp_off, src, new_tokens[last_pos+TOK_off], before_len);
						array_copy(src, tmp_off + before_len, src, tokens[param_off+TOK_off], paste_len);
						new_tokens[last_pos+TOK_type] = TOK_IDENT;
						new_tokens[last_pos+TOK_off] = tmp_off;
						new_tokens[last_pos+TOK_len] = total_len;
						continue;
					}

					default: {
						var s = {""};
						for (var j=0, k=param_off; j<param_len; j+=TOK_SIZE, k+=TOK_SIZE) {
							if (j > 0) s[] = ' ';
							array_append(s, src, tokens[k+TOK_off], tokens[k+TOK_len]);
						}
						var value = token_escape_string(s);
						new_tokens[] = TOK_STRING;
						new_tokens[] = length(src);
						new_tokens[] = length(value);
						new_tokens[] = line;
						array_append(src, value);
						continue;
					}
				}
			}

			array_append(new_tokens, tokens, param_off, param_len);
		}
	}

	return end;
}

function @find_param_end(tokens, src, off)
{
	var level = 0;
	for (; off < length(tokens); off += TOK_SIZE) {
		switch (tokens[off]) {
			case '{', '(', '[':
				level++;
				break;
			case '}', ']':
				level--;
				break;
			case ')':
				if (level == 0) return off;
				level--;
				break;
			case ',':
				if (level == 0) return off;
				break;
		}
	}
	off -= TOK_SIZE;
	return 0, error({script_line(tokens[off+TOK_line]), ": unexpected EOF"});
}

function @process_generate(fname, tokens, src, off, generate_common_tokens)
{
	if (off >= length(tokens) || tokens[off] != '{') {
		return 0, error({script_line(tokens[off+TOK_line]), ": expected '{'"});
	}
	var start = off + TOK_SIZE;
	var end = find_generate_end(tokens, src, start, length(tokens), "generate statement");
	var fragments = null;

	for (var i=start; i<end; i+=TOK_SIZE) {
		if (tokens[i+TOK_type] == TOK_IDENT && tokens[i+TOK_len] == 6 && src[tokens[i+TOK_off]] == 'o' && array_extract(src, tokens[i+TOK_off], tokens[i+TOK_len]) == "output") {
			if (tokens[i+TOK_SIZE+TOK_type] == '{') {
				if (!fragments) {
					fragments = [];
				}
				(i, end) = process_output_statement(tokens, src, i, end, fragments);
				if (!is_int(end)) return 0, end;
				i -= TOK_SIZE;
				continue;
			}
		}
	}

	if (length(generate_common_tokens) == 0) {
		var lines = [0x80000000, 0x7FFFFFFF, fname, 0x80000000, null];
		var suffix = {tokens[off+TOK_line], "_", ++temp_name_cnt};
		var output_tokens = {"__generate_macro_tokens_", suffix};
		var output_src = {"__generate_macro_src_", suffix};
		var output_line = {"__generate_macro_line_", suffix};
		var output_fragments = {"__generate_macro_fragment_", suffix};
		var unique_func = {"__generate_macro_unique_func_", suffix};
		generate_common_tokens[] = tokens_parse([], src, {
			"const @stack_trace_lines = ", token_escape_string(serialize(lines)), ";",
			"const @function___generate_macro_run_0 = \"<generated code>\";",
			"var @", output_tokens, ";",
			"var @", output_src, ";",
			"var @", output_line, ";",
			"var @", output_fragments, ";",
			"var @", unique_func, ";",
			"function @output(s) {",
				"tokens_parse(", output_tokens, ", ", output_src, ", is_string(s)? s : {s}, ", output_line, ");",
			"}",
			"function @unique() {",
				"return ", unique_func, "();",
			"}",
			"function @__generate_macro_output_fragment(off) {",
				"var output_tokens = ", output_tokens, ";",
				"var output_src = ", output_src, ";",
				"var start = length(output_tokens);",
				"array_append(output_tokens, ", output_fragments, ", off+1, ", output_fragments, "[off]);",
				"for (var i=start; i<length(output_tokens); i+=4) {",
					"var token_off = output_tokens[i+1];",
					"var token_len = output_tokens[i+2];",
					"output_tokens[i+1] = length(output_src);",
					"array_append(output_src, output_src, token_off, token_len);",
				"}",
			"}",
			"function __generate_macro_set_output(tokens, src, line, fragments, unique_func) {",
				output_tokens, " = tokens;",
				output_src, " = src;",
				output_line, " = line;",
				output_fragments, " = fragments;",
				unique_func, " = unique_func;",
			"}",
			"function __generate_macro_run() {"
		}, 0);
		generate_common_tokens[] = tokens_parse([], src, "}", 0);
	}

	var generate_tokens = [];
	while (end - start > 0) {
		switch (tokens[start]) {
			case KW_USE, KW_IMPORT: {
				if (tokens[start+TOK_SIZE] != TOK_STRING || tokens[start+2*TOK_SIZE] != ';') {
					return 0, error({script_line(tokens[start+TOK_line]), ": invalid ", tokens[start] == KW_USE? "use" : "import", " statement"});
				}
				array_append(generate_tokens, tokens, start, 3*TOK_SIZE);
				start += 3*TOK_SIZE;
				continue;
			}
		}
		break;
	}
	array_append(generate_tokens, generate_common_tokens[0]);
	array_append(generate_tokens, tokens, start, end-start);
	array_append(generate_tokens, generate_common_tokens[1]);

	var new_tokens = [];
	var (funcs, e) = script_compile(generate_tokens, src);
	if (e) {
		if (is_array(e) && length(e) >= 2 && is_string(e[0]) && length(e[0]) > 0 && e[0][0] == '(') {
			array_insert_array(e[0], 0, fname);
		}
		return 0, e;
	}
	funcs{"__generate_macro_set_output#5"}(new_tokens, src, tokens[off+TOK_line], fragments, unique_func#0);
	funcs{"__generate_macro_run#0"}();
	array_replace_range(tokens, off-TOK_SIZE, end+TOK_SIZE, new_tokens);
}

function @unique_func()
{
	return ++temp_name_cnt;
}

function @process_output_statement(tokens, src, off, end, fragments)
{
	var stmt_start = off;
	var stmt_end = find_generate_end(tokens, src, off+TOK_SIZE*2, end, "output statement");

	off += 2*TOK_SIZE;
	var new_tokens = [];
	var last_off = [off];

	while (off < stmt_end) {
		switch (tokens[off]) {
			case '$':
				if (off+TOK_SIZE < stmt_end) {
					switch (tokens[off+TOK_SIZE]) {
						case '(': {
							append_fragment(new_tokens, last_off, off, tokens, src, fragments);
							var expr_end = find_generate_end(tokens, src, off+0*TOK_SIZE, stmt_end, "output expression");
							tokens_parse(new_tokens, src, "output({", tokens[off+2*TOK_SIZE+TOK_line]);
							array_append(new_tokens, tokens, off+2*TOK_SIZE, expr_end-off-3*TOK_SIZE);
							tokens_parse(new_tokens, src, "});", tokens[expr_end-TOK_SIZE+TOK_line]);
							last_off[0] = expr_end;
							off = expr_end - TOK_SIZE;
							break;
						}
						case '{': {
							append_fragment(new_tokens, last_off, off, tokens, src, fragments);
							var expr_end = find_generate_end(tokens, src, off+0*TOK_SIZE, stmt_end, "string expression");
							tokens_parse(new_tokens, src, "output(token_escape_string({", tokens[off+2*TOK_SIZE+TOK_line]);
							array_append(new_tokens, tokens, off+2*TOK_SIZE, expr_end-off-3*TOK_SIZE);
							tokens_parse(new_tokens, src, "}));", tokens[expr_end-TOK_SIZE+TOK_line]);
							last_off[0] = expr_end;
							off = expr_end - TOK_SIZE;
							break;
						}
					}
				}
				break;
		}
		off += TOK_SIZE;
	}

	append_fragment(new_tokens, last_off, off, tokens, src, fragments);

	array_replace_range(tokens, stmt_start, stmt_end + TOK_SIZE, new_tokens);
	end += length(new_tokens) - (stmt_end - stmt_start + TOK_SIZE);
	return stmt_start + length(new_tokens), end;
}

function @append_fragment(new_tokens, last_off, off, tokens, src, fragments)
{
	if (off <= last_off[0]) {
		if (off < last_off[0]) {
			return 0, error("internal error");
		}
		return;
	}
	var fragment_off = length(fragments);
	var fragment_len = off - last_off[0];
	fragments[] = fragment_len;
	array_append(fragments, tokens, last_off[0], fragment_len);
	tokens_parse(new_tokens, src, {"__generate_macro_output_fragment(", fragment_off, ");"}, 0);
	last_off[0] = off;
}

function @find_generate_end(tokens, src, off, end, stmt_name)
{
	var start = off;
	var level = 0;
	for (; off < end; off += TOK_SIZE) {
		switch (tokens[off]) {
			case '{', '(', '[':
				level++;
				break;
			case '}', ')', ']':
				if (level == 0) return off;
				level--;
				break;
		}
	}
	return 0, error({script_line(tokens[start+TOK_line]), ": unclosed ", stmt_name});
}
