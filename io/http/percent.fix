/*
 * FixBrowser v0.1 - https://www.fixbrowser.org/
 * Copyright (c) 2018-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

import "util/string";

var @hex_chars;
var @allowed_chars;

function percent_encode_auth(s)
{
	return encode(s, "/?#'[]@:", false);
}

function percent_decode_auth(s)
{
	return decode(s, false);
}

function percent_encode_path(s)
{
	return encode(s, "#'[]", false);
}

function percent_decode_path(s)
{
	return decode(s, false);
}

function percent_encode_query(s)
{
	return encode(s, "?#'[]", true);
}

function percent_decode_query(s)
{
	return decode(s, true);
}

function percent_encode_fragment(s)
{
	return encode(s, "'[]", false);
}

function percent_decode_fragment(s)
{
	return decode(s, false);
}

function @encode(s, reserved_chars, space_as_plus)
{
	init();
	var input = string_to_utf8(s);
	var b = {""};
	for (var i=0; i<length(input); i++) {
		var c = input[i];
		if (space_as_plus && c == ' ') {
			b[] = '+';
		}
		else if (!is_allowed_char(c) || string_search_char(reserved_chars, c) != -1) {
			b[] = '%';
			b[] = hex_chars[c >> 4];
			b[] = hex_chars[c & 15];
		}
		else {
			b[] = c;
		}
	}
	return b;
}

function @decode(s, space_as_plus)
{
	init();
	var input = string_to_utf8(s);
	var b = {""};
	for (var i=0; i<length(input); i++) {
		var c = input[i];
		if (space_as_plus && c == '+') {
			b[] = ' ';
		}
		else if (c == '%' && i+2 < length(input)) {
			var hi = from_hex(input[i+1]);
			var lo = from_hex(input[i+2]);
			if (hi != -1 && lo != -1) {
				b[] = (hi << 4) | lo;
				i += 2;
			}
			else {
				b[] = c;
			}
		}
		else {
			b[] = c;
		}
	}
	return string_from_utf8(b);
}

function @is_allowed_char(c)
{
	return c < 128 && (allowed_chars[c >> 5] & (1 << (c & 31))) != 0;
}

function @register_allowed(c)
{
	allowed_chars[c >> 5] |= 1 << (c & 31);
}

function @register_allowed_chars(s)
{
	for (var i=0; i<length(s); i++) {
		register_allowed(s[i]);
	}
}

function @from_hex(c)
{
	if (c >= '0' && c <= '9') return c - '0';
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
	return -1;
}

function @init()
{
	if (hex_chars) return;

	hex_chars = [];
	allowed_chars = [];
	array_set_length(hex_chars, 16);
	array_set_length(allowed_chars, 128/32);
	
	for (var i=0; i<10; i++) {
		hex_chars[i] = '0'+i;
	}
	for (var i=0; i<6; i++) {
		hex_chars[10+i] = 'a'+i;
	}
	
	for (var i='a'; i<='z'; i++) {
		register_allowed(i);
	}
	for (var i='A'; i<='Z'; i++) {
		register_allowed(i);
	}
	for (var i='0'; i<='9'; i++) {
		register_allowed(i);
	}
	register_allowed_chars("-_.~");
	register_allowed_chars("!*'();:@&=+$,/?#[]");
}
