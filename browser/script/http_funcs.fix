/*
 * FixBrowser v0.1 - https://www.fixbrowser.org/
 * Copyright (c) 2018-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

import "io/stream";
import "io/http/http";
import "io/http/url";
import "browser/script/request";
import "browser/script/handle_types";
import "io/http/request" : http_request;

function @script_http_open(params, data)
{
	var url = url_create(params[0]);
	log({"fetch URL: ", url_to_string(url)});

	var http = http_create(url);
	http_set_header(http, "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0");
	http_set_header(http, "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
	http_set_header(http, "Accept-Language", "en-US,en;q=0.5");
	http_set_header(http, "Accept-Encoding", "identity");

	return script_create_handle(HANDLE_TYPE_HTTP, http);
}

function @script_http_set_header(params, data)
{
	var http = script_get_handle(params[0], HANDLE_TYPE_HTTP);
	http_set_header(http, params[1], params[2]);
}

function @script_http_set_post_params(params, data)
{
	var http = script_get_handle(params[0], HANDLE_TYPE_HTTP);
	http_set_post_params(http, params[1]);
}

function @script_http_connect(params, data)
{
	var http = script_get_handle(params[0], HANDLE_TYPE_HTTP);
	http_connect(http);
}

function @script_http_get_header(params, data)
{
	var http = script_get_handle(params[0], HANDLE_TYPE_HTTP);
	return http_request:request_get_header(http_get_request(http), params[1]);
}

function @script_http_get_header_multiple(params, data)
{
	var http = script_get_handle(params[0], HANDLE_TYPE_HTTP);
	return http_request:request_get_header_multiple(http_get_request(http), params[1]);
}

function @stream_from_handle(handle)
{
	var type = script_get_handle_type(handle);
	switch (type) {
		case HANDLE_TYPE_HTTP:
			break;

		default:
			return 0, error("invalid stream handle");
	}

	return script_get_handle(handle, type);
}

function @script_stream_read_part(heap, params, data)
{
	var stream = stream_from_handle(script_get_value(heap, params[0]));
	var buf = [];
	array_set_length(buf, params[3]);
	var num = stream_read_part(stream, buf, 0, length(buf));
	
	if (num > 0) {
		script_set_byte_array(heap, params[1], params[2], buf, 0, num);
	}
	return num;
}

function @script_stream_read(heap, params, data)
{
	var stream = stream_from_handle(script_get_value(heap, params[0]));
	var script_buf = params[1];
	var off, len;
	if (length(params) == 4) {
		off = params[2];
		len = params[3];
	}
	else {
		len = script_get_length(heap, script_buf);
	}

	var buf = [];
	array_set_length(buf, len);
	stream_read(stream, buf, 0, len);
	script_set_byte_array(heap, script_buf, off, buf, 0, len);
}

function @script_stream_write(heap, params, data)
{
	var stream = stream_from_handle(script_get_value(heap, params[0]));
	var script_buf = params[1];
	var off, len;
	if (length(params) == 4) {
		off = params[2];
		len = params[3];
	}
	else {
		len = script_get_length(heap, script_buf);
	}

	var buf = [];
	array_set_length(buf, len);
	script_get_byte_array(heap, script_buf, off, buf, 0, len);
	stream_write(stream, buf, 0, len);
}

function @script_stream_flush(params, data)
{
	var stream = stream_from_handle(params[0]);
	stream_flush(stream);
}

function @script_stream_close(params, data)
{
	var stream = stream_from_handle(params[0]);
	stream_close(stream);
}

function register_http_funcs(heap)
{
	script_register_function(heap, "http_open#1", script_http_open#2, null);
	script_register_function(heap, "http_set_header#3", script_http_set_header#2, null);
	script_register_function(heap, "http_set_post_params#2", script_http_set_post_params#2, null);
	script_register_function(heap, "http_connect#1", script_http_connect#2, null);
	script_register_function(heap, "http_get_header#2", script_http_get_header#2, null);
	script_register_function(heap, "http_get_header_multiple#2", script_http_get_header_multiple#2, null);
	script_register_native_function(heap, "stream_read_part#4", script_stream_read_part#3, null);
	script_register_native_function(heap, "stream_read#2", script_stream_read#3, null);
	script_register_native_function(heap, "stream_read#4", script_stream_read#3, null);
	script_register_native_function(heap, "stream_write#2", script_stream_write#3, null);
	script_register_native_function(heap, "stream_write#4", script_stream_write#3, null);
	script_register_function(heap, "stream_flush#1", script_stream_flush#2, null);
	script_register_function(heap, "stream_close#1", script_stream_close#2, null);
}
