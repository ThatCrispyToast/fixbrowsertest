import "util/common";
import "util/string";
import "util/template";
import "util/json";

function adjust_document(request, document)
{
	var parts = string_split(request_get_path(request), '/');

	if (request_get_domain(request) == "web.archive.org") {
		if (length(parts) > 3 && parts[1] == "web" && parts[2] == "*") {
			array_remove(parts, 0, 3);
			var url = string_join(parts, "/");
			var query = request_get_query(request);
			if (query) {
				url = {url, "?", query};
			}

			var search_div = element_query(document, "div#react-wayback-search");
			if (search_div) {
				handle_search_page(request, document, search_div, url);
			}
		}
	}
}

function @handle_search_page(request, document, content_div, url)
{
	remove_all_elements(document, "noscript");

	var json = json_parse(http_get(link_with_params("https://web.archive.org/__wb/sparkline", {
		"url": url,
		"collection": "web",
		"output": "json"
	})));
	if (!json) {
		element_set_html(content_div, "No results.");
		return;
	}

	var tpl = template_create("site/org/ar/archive.org/search.tpl");
	template_set(tpl, "url", html_escape(url));

	var years = json_get_object(json, "years");
	var keys = json_get_keys(years);
	var min_year = 9999, max_year = 0;
	for (var i=0; i<length(keys); i++) {
		var year = string_parse_int(keys[i]);
		var months = json_get_array(years, keys[i]);
		min_year = min(min_year, year);
		max_year = max(max_year, year);
	}

	if (min_year <= max_year) {
		template_begin(tpl, "years");
		for (var i=max_year; i>=min_year; i--) {
			template_set(tpl, "year", {i});
			if (json_has_key(years, {i})) {
				var (r, e) = populate_year(tpl, url, i);
				if (e) {
					dump(e);
					template_set(tpl, "fail", true);
				}
			}
			template_next_record(tpl);
		}
		template_end(tpl);
	}

	element_set_html(content_div, template_process(tpl));
}

function @populate_year(tpl, url, year)
{
	var json = json_parse(http_get(link_with_params("https://web.archive.org/__wb/calendarcaptures", {
		"url": url,
		"selected_year": {year}
	})));
	if (!json) {
		return;
	}
	
	var timestamps = {};

	for (var i=0, n1=json_length(json); i<n1; i++) {
		var arr = json_get_array(json, i);
		for (var j=0, n2=json_length(arr); j<n2; j++) {
			var arr2 = json_get_array(arr, j);
			for (var k=0, n3=json_length(arr2); k<n3; k++) {
				var obj = json_get_object(arr2, k);
				if (obj) {
					var ts_arr = json_get_array(obj, "ts");
					if (ts_arr) {
						for (var m=0, n4=json_length(ts_arr); m<n4; m++) {
							var ts = json_get_number(ts_arr, m);
							var key = string_substring(ts, 0, 8);
							var list = hash_get(timestamps, key, null);
							if (!list) {
								list = [];
								timestamps{key} = list;
							}
							list[] = ts;
						}
					}
				}
			}
		}
	}

	template_begin(tpl, "days");
	for (var i=length(timestamps)-1; i>=0; i--) {
		var (k, v) = hash_entry(timestamps, i);
		var date = {k};
		array_insert(date, 6, '/');
		array_insert(date, 4, '/');
		template_set(tpl, "date", date);

		template_begin(tpl, "times");
		for (var j=0; j<length(v); j++) {
			var time = string_substring(v[j], 8);
			array_insert(time, 4, ':');
			array_insert(time, 2, ':');
			template_set(tpl, "time", time);
			template_set(tpl, "link", html_escape({"https://web.archive.org/web/", v[j], "/", url}));
			template_next_record(tpl);
		}
		template_end(tpl);

		template_next_record(tpl);
	}
	template_end(tpl);
}
