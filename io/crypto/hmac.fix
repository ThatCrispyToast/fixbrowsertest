/*
 * FixBrowser v0.1 - https://www.fixbrowser.org/
 * Copyright (c) 2018-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

import "io/crypto/md5";
import "io/crypto/sha1";
import "io/crypto/sha256";
import "util/array";

function hmac(key, message, hash_func, block_size)
{
	if (length(key) > block_size) {
		key = hash_func(key);
	}

	if (length(key) < block_size) {
		key = clone(key);
		while (length(key) < block_size) {
			key[] = 0;
		}
	}

	var outer_key_pad = [];
	var inner_key_pad = [];
	array_set_length(outer_key_pad, block_size);
	array_set_length(inner_key_pad, block_size);
	for (var i=0; i<block_size; i++) {
		outer_key_pad[i] = key[i] ^ 0x5c;
		inner_key_pad[i] = key[i] ^ 0x36;
	}
	return hash_func(array_join(outer_key_pad, hash_func(array_join(inner_key_pad, message))));
}

function hmac_md5(key, message)
{
	return hmac(key, message, md5#1, 64);
}

function hmac_sha1(key, message)
{
	return hmac(key, message, sha1#1, 64);
}

function hmac_sha256(key, message)
{
	return hmac(key, message, sha256#1, 64);
}

function @to_hex(value)
{
	var hex = {""};
	var len = length(value);
	for (var i=0; i<len; i++) {
		var b = value[i];
		var hi = b >>> 4;
		var lo = b & 0xF;
		hex[] = hi >= 10? hi - 10 + 'a' : hi + '0';
		hex[] = lo >= 10? lo - 10 + 'a' : lo + '0';
	}
	return hex;
}

function @assert(value, result)
{
	if (value != result) {
		return 0, error({"assert failed (expected ", result, " but got ", value, ")"});
	}
}

function test_hmac()
{
	assert(to_hex(hmac_md5("", "")), "74e6f7298a9c2d168935f58c001bad88");
	assert(to_hex(hmac_sha1("", "")), "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
	assert(to_hex(hmac_sha256("", "")), "b613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad");

	assert(to_hex(hmac_md5("key", "The quick brown fox jumps over the lazy dog")), "80070713463e7749b90c2dc24911e275");
	assert(to_hex(hmac_sha1("key", "The quick brown fox jumps over the lazy dog")), "de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9");
	assert(to_hex(hmac_sha256("key", "The quick brown fox jumps over the lazy dog")), "f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8");
}
