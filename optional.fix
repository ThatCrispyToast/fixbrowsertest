/*
 * FixScript Optional v0.3 - https://www.fixscript.org/
 * Copyright (c) 2021-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

/*----------------------------------------------------------------------------

This token processor allows to enable or disable sections of the code based on
the existence of the other scripts. This allows to provide optional functionality
without requiring the other libraries.

Example:

  use "optional";

  optional "some/script"; // creates import for the script if present

  optional "some/script" {
      // this part will be present if the script is present
  }

  optional ! "some/script" {
      // negation also works
  }

----------------------------------------------------------------------------*/

const {
	@TOK_IDENT,
	@TOK_FUNC_REF,
	@TOK_NUMBER,
	@TOK_HEX_NUMBER,
	@TOK_FLOAT_NUMBER,
	@TOK_CHAR,
	@TOK_STRING,
	@TOK_UNKNOWN,

	@KW_DO,
	@KW_IF,
	@KW_FOR,
	@KW_USE,
	@KW_VAR,
	@KW_CASE,
	@KW_ELSE,
	@KW_BREAK,
	@KW_CONST,
	@KW_WHILE,
	@KW_IMPORT,
	@KW_RETURN,
	@KW_SWITCH,
	@KW_DEFAULT,
	@KW_CONTINUE,
	@KW_FUNCTION
};

const {
	@TOK_type,
	@TOK_off,
	@TOK_len,
	@TOK_line,
	@TOK_SIZE
};

function process_tokens(fname, tokens, src)
{
	var optionals = {};

	for (var i=0; i<length(tokens); i+=TOK_SIZE) {
		if (tokens[i+TOK_type] == TOK_IDENT && tokens[i+TOK_len] == 8 && src[tokens[i+TOK_off]] == 'o') {
			if (get_token_value(tokens, src, i) == "optional") {
				i = parse_optional(tokens, src, i, optionals) - TOK_SIZE;
				continue;
			}
		}
	}

	//dump_tokens(tokens, src);
	//return 0, 1;
}

function @parse_optional(tokens, src, i, optionals)
{
	var start = i;

	var negate = false;
	i = expect_next(tokens, src, i);
	if (tokens[i+TOK_type] == '!') {
		negate = true;
	}
	else {
		i -= TOK_SIZE;
	}

	i = expect_type(tokens, src, i, TOK_STRING, "string");
	var script_name = get_token_string(tokens, src, i);

	if (!hash_contains(optionals, script_name)) {
		var (r, e) = script_query(script_name, null, null, null, null);
		optionals{script_name} = !e;
	}

	var result = optionals{script_name};
	if (negate) {
		result = !result;
	}

	i = expect_next(tokens, src, i);
	if (tokens[i+TOK_type] == ';') {
		var new_tokens = [];
		if (result) {
			tokens_parse(new_tokens, src, {"import ", token_escape_string(script_name), ";"}, tokens[start+TOK_line]);
		}
		array_replace_range(tokens, start, i+TOK_SIZE, new_tokens);
		return start;
	}

	i -= TOK_SIZE;
	i = expect_symbol(tokens, src, i, '{');
	var section_start = i;
	i = expect_expression(tokens, src, i, false);
	var section_end = i+TOK_SIZE;
	i = expect_symbol(tokens, src, i, '}');

	if (result) {
		array_remove(tokens, section_end, i-section_end+TOK_SIZE);
		array_remove(tokens, start, section_start-start+TOK_SIZE);
	}
	else {
		array_remove(tokens, start, i-start+TOK_SIZE);
	}

	return start;
}

function @dump_tokens(tokens, src)
{
	var s = {""};
	var last_line = 1, last_type = -1;
	
	for (var i=0; i<length(tokens); i+=TOK_SIZE) {
		if (last_line != tokens[i+TOK_line]) {
			s[] = '\n';
			last_line = tokens[i+TOK_line];
		}
		else {
			if (last_type < ' ' && tokens[i+TOK_type] < ' ') {
				s[] = ' ';
			}
		}
		array_append(s, src, tokens[i+TOK_off], tokens[i+TOK_len]);
		last_type = tokens[i+TOK_type];
	}
	log(s);
}

function @expect_next(tokens, src, i)
{
	i += TOK_SIZE;
	if (i >= length(tokens)) {
		return 0, error({script_line(tokens[i+TOK_line]), ": unexpected end of file"});
	}
	return i;
}

function @expect_type(tokens, src, i, type, what)
{
	i += TOK_SIZE;
	if (tokens[i+TOK_type] != type) {
		return 0, error({script_line(tokens[i+TOK_line]), ": expected ", what});
	}
	return i;
}

function @expect_symbol(tokens, src, i, sym)
{
	i += TOK_SIZE;
	if (tokens[i+TOK_type] != sym) {
		var s = {" "};
		s[0] = sym;
		return 0, error({script_line(tokens[i+TOK_line]), ": expected '", s, "'"});
	}
	return i;
}

function @expect_expression(tokens, src, i, inner)
{
	var level = 0;
	i += TOK_SIZE;
	for (; i < length(tokens); i += TOK_SIZE) {
		switch (tokens[i]) {
			case '(', '{', '[':
				level++;
				break;
			case ')', '}', ']':
				if (level == 0) {
					return i - TOK_SIZE;
				}
				level--;
				break;
			case ',', ';':
				if (level == 0 && inner) {
					return i - TOK_SIZE;
				}
				break;
		}
	}

	return 0, error("unexpected end of file");
}

function @get_token_value(tokens, src, i)
{
	return array_extract(src, tokens[i+TOK_off], tokens[i+TOK_len]);
}

function @get_token_string(tokens, src, i)
{
	return token_parse_string(src, tokens[i+TOK_off], tokens[i+TOK_len]);
}
