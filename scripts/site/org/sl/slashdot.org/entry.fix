import "util/common";
import "util/string";
import "util/json";
import "util/extract";

const {
	@POST_id,
	@POST_pid,
	@POST_html,
	@POST_children,
	@POST_SIZE
};

function is_same_domain(src, dest)
{
	if (domain_ends_with(dest, "fsdn.com")) return true;
	return false;
}

function adjust_document(request, document)
{
	var discussion_id = extract_discussion_id(document);
	if (discussion_id) {
		var comments = element_query(document, "ul#commentlisting");
		var json = json_parse(http_get({"https://", request_get_domain(request), "/ajax.pl"}, {
			"op": "comments_fetch",
			"d2_seen": "1",
			"threshold": "-1",
			"highlightthresh": "-1",
			"discussion_id": discussion_id,
			"abbreviated": "",
			"pieces": "",
			"fetch_all": "1"
		}));
		var posts = extract_posts(json);
		var num_posts = posts[0];
		element_remove_all(comments);
		remove_spam(posts[1]);
		insert_posts(comments, posts[1]);

		var loaded_span = element_query(document, "span.loadedcommentcnt");
		if (loaded_span) {
			element_set_text(loaded_span, {num_posts});
		}

		var noscript = element_get_next_tag(comments);
		if (noscript && element_get_type(noscript) == "noscript") {
			element_remove(noscript);
		}

		remove_element(document, "a#d2loadall");
	}
}

function @extract_discussion_id(document)
{
	var scripts = element_query_all(document, "script");
	for (var i=0; i<length(scripts); i++) {
		var script = element_extract_text(scripts[i]);
		var discussion_id = extract_string(script, "D2.discussion_id(", ");");
		if (discussion_id) {
			return discussion_id;
		}
	}
	return null;
}

function @extract_posts(json)
{
	var html = json_get_object(json, "html");
	var keys = json_get_keys(html);
	var comment_html = {};
	for (var i=0; i<length(keys); i++) {
		comment_html{keys[i]} = json_get_string(html, keys[i]);
	}

	var update_data = json_get_object(json, "update_data");
	var total_comments = json_get_int(update_data, "totalcommentcnt", -1);
	var new_cids_order = json_get_array(update_data, "new_cids_order");
	var new_cids_data = json_get_array(update_data, "new_cids_data");

	var posts = [];
	var posts_by_id = {};
	for (var i=0, n=json_length(new_cids_order); i<n; i++) {
		var data = json_get_object(new_cids_data, i);

		var post = object_create(POST_SIZE);
		post->POST_id = json_get_number(new_cids_order, i);
		post->POST_pid = json_get_number(data, "pid");
		post->POST_html = hash_get(comment_html, {"comment_", post->POST_id}, "");
		posts[] = post;
		posts_by_id{post->POST_id} = post;
	}

	var num_posts = length(posts);
	for (var i=0; i<length(posts); i++) {
		var post = posts[i];
		var parent = hash_get(posts_by_id, post->POST_pid, null);
		if (parent) {
			if (!parent->POST_children) {
				parent->POST_children = [];
			}
			parent->POST_children[] = post;
			array_remove(posts, i--);
			continue;
		}
	}
	return [num_posts, posts];
}

function @remove_spam(posts)
{
	for (var i=0; i<length(posts); i++) {
		var post = posts[i];
		var html = post->POST_html;

		if (string_search_string(html, "\"Real coders don't need either GUIs or automatic memory management. Delphi is dead\" <b>by BarbaraHudson</b>") != -1) {
			array_remove(posts, i--);
			continue;
		}

		if (string_search_string(html, "itQMMMMMW6iiiiiiiitKMMMMMMMMMMKtiiiiicSMMMMMMMMHJi") != -1) {
			array_remove(posts, i--);
			continue;
		}

		if (post->POST_children) {
			remove_spam(post->POST_children);
		}
	}
}

function @insert_posts(container, posts)
{
	for (var i=0; i<length(posts); i++) {
		var post = posts[i];

		var li = element_create("li");
		element_set_attr(li, "id", {"tree_", post->POST_id});
		element_set_attr(li, "class", "comment full contain");

		var comment_div = element_create("div");
		element_set_attr(comment_div, "id", {"comment_", post->POST_id});
		element_set_attr(comment_div, "class", "cw");
		element_set_html(comment_div, post->POST_html);
		element_append_child(li, comment_div);

		if (post->POST_children) {
			var ul = element_create("ul");
			element_set_attr(li, "id", {"commtree_", post->POST_id});
			insert_posts(ul, post->POST_children);
			element_append_child(li, ul);
		}
		
		element_append_child(container, li);
	}
}
