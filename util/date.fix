/*
 * FixBrowser v0.1 - https://www.fixbrowser.org/
 * Copyright (c) 2018-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

import "util/string";

const {
	DATE_year,
	DATE_month,
	DATE_day,
	DATE_hour,
	DATE_minute,
	DATE_second,
	DATE_SIZE
};

var @normal_year;
var @leap_year;

function date_get_utc();
function date_get_local();
function date_get_both();

function date_create(year, month, day, hour, minute, second)
{
	return [year, month, day, hour, minute, second];
}

function @init_tables()
{
	normal_year = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 0];
	leap_year   = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 0];

	var acc1 = 0, acc2 = 0;
	for (var i=0; i<13; i++) {
		var val1 = normal_year[i];
		var val2 = leap_year[i];
		normal_year[i] = acc1;
		leap_year[i] = acc2;
		acc1 += val1; 
		acc2 += val2;
	}
}

function @is_leap_year(year)
{
	if (year % 4 == 0) {
		if (year % 100 == 0) {
			if (year % 400 == 0) {
				return true;
			}
			return false;
		}
		return true;
	}
	return false;
}

function @floor_div(a, b)
{
	var value = a / b;
	if (value < 0) return value - 1;
	return value;
}

function @floor_mod(a, b)
{
	var value = a % b;
	if (value < 0) return value + b;
	return value;
}

function date_make_correct(date)
{
	if (!normal_year) {
		init_tables();
	}

	date->DATE_year += floor_div(date->DATE_month-1, 12);
	date->DATE_month = floor_mod(date->DATE_month-1, 12) + 1;

	var table = is_leap_year(date->DATE_year)? leap_year : normal_year;
	var day_in_year = table[date->DATE_month-1] + (date->DATE_day-1);

	date->DATE_minute += floor_div(date->DATE_second, 60);
	date->DATE_second = floor_mod(date->DATE_second, 60);

	date->DATE_hour += floor_div(date->DATE_minute, 60);
	date->DATE_minute = floor_mod(date->DATE_minute, 60);

	day_in_year += floor_div(date->DATE_hour, 24);
	date->DATE_hour = floor_mod(date->DATE_hour, 24);

	while (day_in_year < 0) {
		date->DATE_year--;
		table = is_leap_year(date->DATE_year)? leap_year : normal_year;
		day_in_year += table[12];
	}
	while (day_in_year >= table[12]) {
		day_in_year -= table[12];
		date->DATE_year++;
		table = is_leap_year(date->DATE_year)? leap_year : normal_year;
	}

	for (var i=11; i>=0; i--) {
		if (day_in_year >= table[i]) {
			date->DATE_day = day_in_year - table[i] + 1;
			date->DATE_month = i+1;
			break;
		}
	}
}

function date_get_corrected(date)
{
	date = clone(date);
	date_make_correct(date);
	return date;
}

function date_get_day_of_week(date)
{
	if (!normal_year) {
		init_tables();
	}
	
	var table = is_leap_year(date->DATE_year)? leap_year : normal_year;
	var day_in_year = table[date->DATE_month-1] + (date->DATE_day-1);

	var a = date->DATE_year - 1;
	var dow = (1 + 5*(a%4) + 4*(a%100) + 6*(a%400) + day_in_year) % 7;
	if (dow == 0) dow = 7;
	return dow;
}

function date_diff_as_seconds(from, to)
{
	if (!normal_year) {
		init_tables();
	}
	
	var table = is_leap_year(from->DATE_year)? leap_year : normal_year;
	var day_in_year = table[from->DATE_month-1] + (from->DATE_day-1);

	var days;
	if (from->DATE_year == to->DATE_year) {
		var day_in_year2 = table[to->DATE_month-1] + (to->DATE_day-1);
		days = day_in_year2 - day_in_year;
	}
	else if (from->DATE_year < to->DATE_year) {
		var year = from->DATE_year;
		days = table[12] - day_in_year;
		year++;
		while (year < to->DATE_year) {
			table = is_leap_year(year)? leap_year : normal_year;
			days += table[12];
			year++;
		}
		var day_in_year2 = table[to->DATE_month-1] + (to->DATE_day-1);
		days += day_in_year2;
	}
	else {
		var year = from->DATE_year;
		days = -day_in_year;
		while (year > to->DATE_year) {
			year--;
			table = is_leap_year(year)? leap_year : normal_year;
			days -= table[12];
		}
		var day_in_year2 = table[to->DATE_month-1] + (to->DATE_day-1);
		days += day_in_year2;
	}

	var hours = (to->DATE_hour - from->DATE_hour) + days * 24;
	var minutes = (to->DATE_minute - from->DATE_minute);
	var seconds = (to->DATE_second - from->DATE_second);
	return hours * 3600 + minutes * 60 + seconds;
}

function date_compare(date1, date2)
{
	if (date1->DATE_year < date2->DATE_year) return -1;
	if (date1->DATE_year > date2->DATE_year) return +1;

	if (date1->DATE_month < date2->DATE_month) return -1;
	if (date1->DATE_month > date2->DATE_month) return +1;

	if (date1->DATE_day < date2->DATE_day) return -1;
	if (date1->DATE_day > date2->DATE_day) return +1;

	if (date1->DATE_hour < date2->DATE_hour) return -1;
	if (date1->DATE_hour > date2->DATE_hour) return +1;

	if (date1->DATE_minute < date2->DATE_minute) return -1;
	if (date1->DATE_minute > date2->DATE_minute) return +1;

	if (date1->DATE_second < date2->DATE_second) return -1;
	if (date1->DATE_second > date2->DATE_second) return +1;

	return 0;
}

function date_to_string(date)
{
	return {
		string_pad_left({date->DATE_year}, 4, '0'), "-",
		string_pad_left({date->DATE_month}, 2, '0'), "-",
		string_pad_left({date->DATE_day}, 2, '0'), " ",
		string_pad_left({date->DATE_hour}, 2, '0'), ":",
		string_pad_left({date->DATE_minute}, 2, '0'), ":",
		string_pad_left({date->DATE_second}, 2, '0')
	};
}

function @assert(value, result)
{
	if (value != result) {
		return 0, error({"assert failed (expected ", result, " but got ", value, ")"});
	}
}

function test_date()
{
	assert(is_leap_year(1600), true);
	assert(is_leap_year(1700), false);
	assert(is_leap_year(1800), false);
	assert(is_leap_year(1900), false);
	assert(is_leap_year(2000), true);
	assert(is_leap_year(2001), false);
	assert(is_leap_year(2002), false);
	assert(is_leap_year(2003), false);
	assert(is_leap_year(2004), true);

	var date = date_create(2000, 1, 1, 16, 3, 25);

	date->DATE_second -= 137;
	date_make_correct(date);
	assert(date, date_create(2000, 1, 1, 16, 1, 8));
	
	date->DATE_second += 137;
	date_make_correct(date);
	assert(date, date_create(2000, 1, 1, 16, 3, 25));

	date->DATE_year += 3;
	date_make_correct(date);
	assert(date, date_create(2003, 1, 1, 16, 3, 25));

	date->DATE_month += 12;
	date_make_correct(date);
	assert(date, date_create(2004, 1, 1, 16, 3, 25));

	date->DATE_day -= 5;
	date_make_correct(date);
	assert(date, date_create(2003, 12, 27, 16, 3, 25));

	date->DATE_day += 5;
	date_make_correct(date);
	assert(date, date_create(2004, 1, 1, 16, 3, 25));

	assert(date_get_day_of_week(date_create(2010, 1, 1, 0, 0, 0)), 5);
	assert(date_get_day_of_week(date_create(2011, 1, 1, 0, 0, 0)), 6);
	assert(date_get_day_of_week(date_create(2012, 1, 1, 0, 0, 0)), 7);
	assert(date_get_day_of_week(date_create(2013, 1, 1, 0, 0, 0)), 2);
	assert(date_get_day_of_week(date_create(2014, 1, 1, 0, 0, 0)), 3);
	assert(date_get_day_of_week(date_create(2015, 1, 1, 0, 0, 0)), 4);
	assert(date_get_day_of_week(date_create(2016, 1, 1, 0, 0, 0)), 5);
	assert(date_get_day_of_week(date_create(2017, 1, 1, 0, 0, 0)), 7);
	assert(date_get_day_of_week(date_create(2018, 1, 1, 0, 0, 0)), 1);
	assert(date_get_day_of_week(date_create(2019, 1, 1, 0, 0, 0)), 2);

	assert(date_get_day_of_week(date_create(2019, 4, 14, 0, 0, 0)), 7);
	assert(date_get_day_of_week(date_create(2019, 4, 15, 0, 0, 0)), 1);
	assert(date_get_day_of_week(date_create(2019, 4, 16, 0, 0, 0)), 2);

	assert(date_diff_as_seconds(date_create(2000, 1, 1, 0, 0, 0), date_create(2010, 1, 1, 0, 0, 0)), 315619200);
	assert(date_diff_as_seconds(date_create(2010, 1, 1, 0, 0, 0), date_create(2000, 1, 1, 0, 0, 0)), -315619200);
}
