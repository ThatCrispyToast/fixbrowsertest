/*
 * FixBrowser v0.1 - https://www.fixbrowser.org/
 * Copyright (c) 2018-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

import "io/stream";
import "io/http/http";
import "io/http/util";
import "io/http/request" : http_req;
import "io/http/path";
import "io/http/url";
import "io/http/date";
import "io/tls/cert";
import "io/tls/tls";
import "io/charset/charset";
import "util/string";
import "util/html";
import "util/template";
import "util/base64";
import "proxy/handler_outside";
import "browser/html/html";
import "browser/html/element";
import "browser/css/css";
import "browser/css/stylesheet";
import "browser/script/script";
import "browser/script/request" : script_request;
import "proxy/html/whitelist";
import "proxy/css/whitelist";
import "proxy/session";
import "proxy/util";

const {
	@RESPONSE_stream,
	@RESPONSE_session,
	@RESPONSE_date,
	@RESPONSE_expires,
	@RESPONSE_SIZE
};

function handle_proxy_request(stream, req)
{
	var session_key = null;
	
	var cookies = hash_get(req->http_req:REQ_headers, "Cookie", null);
	if (cookies) {
		for (var i=0; i<length(cookies); i++) {
			var prefix = "fixproxy_session=";
			if (string_starts_with(cookies[i], prefix)) {
				session_key = string_substring(cookies[i], length(prefix));
			}
		}
	}

	var response = object_create(RESPONSE_SIZE);
	response->RESPONSE_stream = stream;
	response->RESPONSE_session = session_get_or_create(session_key);
	
	var cached_css = global_get(["cache.css", req->REQ_path]);
	if (cached_css) {
		send_response(response, "text/css; charset=UTF-8", cached_css);
		return;
	}

	var req_path = req->REQ_path;
	var image_domains = null;
	while (string_starts_with(req_path, "/img/")) {
		var idx = string_search_char(req_path, '/', 5);
		if (idx == -1) return 0, error("invalid image domain request");
		var domain = string_substring(req_path, 5, idx);
		array_remove(req_path, 0, idx);

		if (!image_domains) image_domains = [];
		image_domains[] = domain;
	}

	var target_url = url_create(string_substring(req_path, 1));
	var scheme = target_url->URL_scheme;
	if (scheme != "http" && scheme != "https") {
		return 0, error({"invalid URL scheme: ", scheme});
	}

	if (target_url->URL_scheme != null || target_url->URL_host != null) {
		if (length(target_url->URL_path) == 0 || target_url->URL_path[0] != '/') {
			array_insert(target_url->URL_path, 0, '/');
			var new_url = rewrite_url([null, target_url], url_to_string(target_url), false);
			stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", new_url, "\r\n\r\n"});
			return;
		}
	}

	if (url_is_relative(target_url)) {
		return 0, error("url must be absolute");
	}

	log({"URL: ", url_to_string(target_url)});
		
	var script_request = script_request:request_create(target_url);
	var replaced_content = script_run_domain_handle_request(script_request);
	if (script_request->REQ_redirect) {
		var new_url = rewrite_url([script_request, target_url], script_request->REQ_redirect, false);
		stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", new_url, "\r\n\r\n"});
		return;
	}
	if (replaced_content) {
		var document = html_parse(replaced_content, null);

		script_run_domain_adjust_document(script_request, document);
		if (script_request->REQ_redirect) {
			stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", rewrite_url([script_request, target_url], script_request->REQ_redirect, false), "\r\n\r\n"});
			return;
		}
		document = request_get_document_replacement(script_request, document);
		script_run_global_adjust_document(script_request, document);
		if (script_request->REQ_redirect) {
			stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", rewrite_url([script_request, target_url], script_request->REQ_redirect, false), "\r\n\r\n"});
			return;
		}
		document = request_get_document_replacement(script_request, document);
		whitelist_document(document, target_url, rewrite_url#3, [script_request, target_url], image_domains);

		send_response(response, element_to_html(document));
		return;
	}

	var http = http_create(target_url);
	http_set_header(http, "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0");
	http_set_header(http, "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
	http_set_header(http, "Accept-Language", "en-US,en;q=0.5");
	http_set_header(http, "Accept-Encoding", "identity");
	if (req->REQ_post_data) {
		http_set_post_data(http, "application/x-www-form-urlencoded; charset=UTF-8", req->REQ_post_data);
	}
	if (script_request->REQ_send_headers) {
		var headers = script_request->REQ_send_headers;
		for (var i=0; i<length(headers); i+=2) {
			http_set_header(http, headers[i+0], headers[i+1]);
		}
	}

	var (http_res, http_err) = http_connect(http);
	if (http_err) {
		var tls_error = http_get_tls_error(http);
		if (tls_error) {
			handle_tls_error(response, http_get_tls_certs(http), tls_error, target_url, http_get_tls_cert_hash(http));
			return;
		}
		return 0, http_err;
	}

	var http_req = http_get_request(http);
	script_request->script_request:REQ_headers = http_req->http_req:REQ_headers;

	var code = http_req->REQ_code;
	if (code == 301 || code == 302 || code == 303 || code == 307 || code == 308) {
		var location = request_get_header(http_req, "Location");
		if (!location) return 0, error("no redirect location provided");
		stream_close(http);

		var new_url = url_to_string(url_merge(target_url, url_create(location)));
		
		replaced_content = script_run_domain_handle_redirect(script_request, new_url);
		if (!replaced_content && !script_request->REQ_redirect) {
			replaced_content = script_run_global_handle_redirect(script_request, new_url);
		}
		
		if (script_request->REQ_redirect) {
			stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", rewrite_url([script_request, target_url], script_request->REQ_redirect, false), "\r\n\r\n"});
			return;
		}
		if (replaced_content) {
			var document = html_parse(replaced_content, null);
		
			script_run_domain_adjust_document(script_request, document);
			if (script_request->REQ_redirect) {
				stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", rewrite_url([script_request, target_url], script_request->REQ_redirect, false), "\r\n\r\n"});
				return;
			}
			document = request_get_document_replacement(script_request, document);
			script_run_global_adjust_document(script_request, document);
			if (script_request->REQ_redirect) {
				stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", rewrite_url([script_request, target_url], script_request->REQ_redirect, false), "\r\n\r\n"});
				return;
			}
			document = request_get_document_replacement(script_request, document);
			whitelist_document(document, target_url, rewrite_url#3, [script_request, target_url], image_domains);

			send_response(response, element_to_html(document));
			return;
		}

		var header_string;
		switch (code) {
			case 301: header_string = "301 Moved Permanently"; break;
			case 302: header_string = "302 Found"; break;
			default:
			case 303: header_string = "303 See Other"; break;
			case 307: header_string = "307 Temporary Redirect"; break;
			case 308: header_string = "308 Permanent Redirect"; break;
		}

		stream_write(stream, {"HTTP/1.1 ", header_string, "\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", rewrite_url([script_request, target_url], new_url, false), "\r\n\r\n"});
		return;
	}

	var content_type = request_get_header(http_req, "Content-Type");
	if (!content_type) {
		content_type = "text/html";
	}
	var content_charset = null;
	var parts = string_split(content_type, ';');
	content_type = string_trim(parts[0]);
	for (var i=1; i<length(parts); i++) {
		var p = string_split(parts[i], '=');
		if (length(p) == 2 && string_trim(p[0]) == "charset") {
			content_charset = charset_get(string_trim(p[1]));
		}
	}

	var date = null, expires = null;
	var date_header = request_get_header(http_req, "Date");
	if (date_header) {
		var (r, e) = parse_http_date(date_header);
		if (!e) {
			date = r;
		}
	}
	var expires_header = request_get_header(http_req, "Expires");
	if (expires_header) {
		var (r, e) = parse_http_date(expires_header);
		if (!e) {
			expires = r;
		}
	}
	if (expires) {
		if (date) {
			var (r, e) = http_date_compare(expires, date);
			if (!e) {
				if (r <= 0) {
					expires = null;
				}
			}
		}
	}
	response->RESPONSE_date = date;
	response->RESPONSE_expires = expires;

	if (content_type == "multipart/x-mixed-replace") {
		// TODO
	}

	var content_len = request_get_header(http_req, "Content-Length");
	if (content_len) {
		content_len = string_parse_long(content_len);
		if (content_len[1] < 0) {
			return 0, error("negative content length");
		}
	}

	if (is_image_file(content_type)) {
		var headers = {"HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: ", content_type, "\r\n"};
		append_headers(response, headers);
		if (content_len) {
			string_append(headers, {"Content-Length: ", string_long(content_len), "\r\n"});
		}
		string_append(headers, "\r\n");
		stream_write(stream, headers);
		stream_copy(stream, http);
		stream_close(http);
		stream_close(stream);
		return;
	}

	if (is_html_file(content_type)) {
		global_set("unknown_css_properties", {}, 3600);
		var buf = stream_read_all(http, []);
		stream_close(http);
		var document = html_parse(buf, content_charset);

		script_run_domain_adjust_document(script_request, document);
		if (script_request->REQ_redirect) {
			stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", rewrite_url([script_request, target_url], script_request->REQ_redirect, false), "\r\n\r\n"});
			return;
		}
		document = request_get_document_replacement(script_request, document);
		script_run_global_adjust_document(script_request, document);
		if (script_request->REQ_redirect) {
			stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: ", rewrite_url([script_request, target_url], script_request->REQ_redirect, false), "\r\n\r\n"});
			return;
		}
		document = request_get_document_replacement(script_request, document);
		whitelist_document(document, target_url, rewrite_url#3, [script_request, target_url], image_domains);

		send_response(response, element_to_html(document));
		return;
	}

	if (is_css_file(content_type)) {
		var buf = stream_read_all(http, []);
		stream_close(http);
		var sheet = css_parse(buf, content_charset);
		whitelist_stylesheet(sheet, rewrite_url#3, [script_request, target_url]);
		var processed = stylesheet_to_string(sheet);
		global_set(["cache.css", req->REQ_path], processed, 3600);
		send_response(response, "text/css; charset=UTF-8", processed);
		return;
	}
	
	send_response(response, {"Unhandled content type: <b><code>", html_escape(content_type), "</code></b>"});

	var buf = stream_read_all(http, []);
	stream_close(http);
}

function handle_accept_certificate_request(stream, req)
{
	var params = request_get_post_params(req);
	var url = url_create(params{"url"}[0]);

	if (params{"csrf_token"}[0] == get_csrf_token()) {
		http_set_valid_certificate(url->URL_host, base64_decode(params{"hash"}[0]), false);
	}
	stream_write(stream, {"HTTP/1.1 303 See Other\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nLocation: /", url_to_string(url), "\r\n\r\n"});
	stream_close(stream);
}

function @show_subtable(entries, expand)
{
	var s = {"<table border=\"1\">"};
	for (var i=0; i<length(entries); i++) {
		var (k, v) = hash_entry(entries, i);
		string_append(s, "<tr valign=\"top\">");
		string_append(s, {"<td nowrap>", k, "</td>"});
		if (expand) {
			string_append(s, {"<td>", show_subtable(v, false), "</td>"});
		}
		else {
			string_append(s, {"<td><pre>", v, "</pre></td>"});
		}
		string_append(s, "</tr>");
	}
	string_append(s, "</table>");
	return s;
}

function @show_certificate(cert)
{
	var dump = cert_dump(cert);
	var s = {"<table border=\"1\" class=\"certificate\" align=\"center\">"};
	for (var i=0; i<length(dump); i++) {
		var (k, v) = hash_entry(dump, i);
		if (k != "Issuer" && k != "Validity" && k != "Subject" && k != "Alternative Subject Names" && k != "SHA-256 Fingerprint") {
			string_append(s, "<tr valign=\"top\" class=\"detail\">");
		}
		else {
			string_append(s, "<tr valign=\"top\">");
		}
		string_append(s, {"<td nowrap>", k, "</td>"});
		if (k == "Issuer" || k == "Validity" || k == "Subject" || k == "Subject Public Key" || k == "Unrecognized Extensions") {
			string_append(s, {"<td>", show_subtable(v, k == "Unrecognized Extensions"), "</td>"});
		}
		else {
			if (k == "SHA-256 Fingerprint") {
				v = {string_substring(v, 0, 48), "<span class=\"delim\"></span>", string_substring(v, 48)};
			}
			string_append(s, {"<td><pre>", v, "</pre></td>"});
		}
		string_append(s, "</tr>");
	}
	string_append(s, "</table>");
	return s;
}

function @handle_tls_error(response, tls_certs, tls_error, url, hash)
{
	var tpl = template_create("tls_error.tpl");
	template_set(tpl, "error", html_escape(tls_error));
	template_begin(tpl, "certs");
	for (var i=0; i<length(tls_certs); i++) {
		var cert = tls_certs[i];
		template_set(tpl, "id", {i});
		template_set(tpl, "name", html_escape(cert->CERT_subject->NAME_common_name));
		template_set(tpl, "cert", show_certificate(cert));
		template_next_record(tpl);
	}
	template_end(tpl);
	template_set(tpl, "csrf_token", html_escape(get_csrf_token()));
	template_set(tpl, "url", html_escape(url_to_string(url)));
	template_set(tpl, "hash", html_escape(base64_encode(hash)));
	send_response(response, template_process(tpl));
}

function @is_image_file(content_type)
{
	if (content_type == "image/gif") return true;
	if (content_type == "image/png") return true;
	if (content_type == "image/jpeg") return true;
	if (content_type == "image/jpg") return true;

	// TODO: move to proper place
	if (content_type == "text/plain") return true;
	return false;
}

function @is_html_file(content_type)
{
	if (content_type == "text/html") return true;
	if (content_type == "application/xhtml+xml") return true;
	return false;
}

function @is_css_file(content_type)
{
	if (content_type == "text/css") return true;
	return false;
}

function @rewrite_url(data, value, direct_link)
{
	var script_request = data[0];
	var base = data[1];

	if (string_starts_with(value, "javascript:")) {
		return "#";
	}
	
	var same_domain = false;
	var bypass_outside = false;
	if (!same_domain && script_request) {
		var urls = script_request->REQ_same_domain_urls;
		if (urls && hash_contains(urls, value)) {
			same_domain = true;
			bypass_outside = true;
		}
	}

	if (direct_link) {
		same_domain = true;
	}

	var merged = url_merge(base, url_create(value));
	var same_scheme = (base->URL_scheme == merged->URL_scheme);
	if (!same_scheme && base->URL_scheme == "http" && merged->URL_scheme == "https") {
		same_scheme = true;
	}

	if (!same_domain && script_request) {
		var domains = script_request->REQ_same_domains;
		if (domains) {
			for (var i=0; i<length(domains); i+=2) {
				if (domain_ends_with(merged->URL_host, domains[i+0])) {
					if (domains[i+1] || same_scheme) {
						same_domain = true;
					}
					break;
				}
			}
		}
	}

	if (!same_domain) {
		if ((merged->URL_host != base->URL_host && !is_same_domain(base->URL_host, merged->URL_host)) || merged->URL_port != base->URL_port || !same_scheme) {
			return {"/outside/", url_to_string(merged)};
		}
	}
	if (!bypass_outside && requires_outside_handler(merged)) {
		return {"/outside/", url_to_string(merged)};
	}
	return {"/", url_to_string(merged)};
}

function @domain_ends_with(domain, match)
{
	if (domain == match) return true;
	var len = length(match);
	if (length(domain) < len+1) return false;
	if (domain[length(domain)-len-1] != '.') return false;
	return array_extract(domain, length(domain)-len, len) == match;
}

function @append_headers(response, headers)
{
	var session = response->RESPONSE_session;
	session_update(session);

	if (response->RESPONSE_date) {
		string_append(headers, {"Date: ", http_date_to_string(response->RESPONSE_date), "\r\n"});
	}
	if (response->RESPONSE_expires) {
		string_append(headers, {"Expires: ", http_date_to_string(response->RESPONSE_expires), "\r\n"});
	}
	if (session_is_new(session)) {
		string_append(headers, {"Set-Cookie: fixproxy_session=", session_get_key(session), "; path=/\r\n"});
	}
}

function @send_response(response, response_data)
{
	send_response(response, "text/html; charset=UTF-8", response_data);
}

function @send_response(response, content_type, response_data)
{
	var stream = response->RESPONSE_stream;
	
	var headers ={"HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: ", content_type, "\r\n"};
	append_headers(response, headers);
	string_append(headers, "\r\n");

	stream_write(stream, headers);
	stream_write(stream, string_to_utf8(response_data));
	stream_close(stream);
}

function @stream_copy(stream, src)
{
	var buf = [];
	array_set_length(buf, 4096);

	var read;
	while ((read = stream_read_part(src, buf, 0, length(buf))) >= 0) {
		stream_write(stream, buf, 0, read);
	}
}
