/*
 * FixBrowser v0.1 - https://www.fixbrowser.org/
 * Copyright (c) 2018-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

import "math/bigint";
import "io/crypto/sha256";

// based on fastecdsa (revision 5c7d02a11ce1d0998f8d3745775994f0f3046467)
// https://github.com/AntonKueltz/fastecdsa (released to public domain using unlicense.org)

const {
	CURVE_X25519,
	CURVE_P256,
	CURVE_P384
};

const {
	@CURVE_p,
	@CURVE_a,
	@CURVE_b,
	@CURVE_q,
	@CURVE_gx,
	@CURVE_gy
};

const {
	@POINT_x,
	@POINT_y
};

var @curve_p256;
var @curve_p384;

function ecdh_calc_public_key_x25519(priv);
function ecdh_calc_secret_x25519(priv, other_pub);

function @curve_is_point_on_curve(curve, p)
{
	var x = p->POINT_x;
	var y = p->POINT_y;
	var left = bigint_mul(y, y);
	var right = bigint_add(bigint_add(bigint_mul(bigint_mul(x, x), x), bigint_mul(curve->CURVE_a, x)), curve->CURVE_b);
	return bigint_is_zero(bigint_rem(bigint_sub(left, right), curve->CURVE_p));
}

function @verify(sig, msg, Q, curve, hash_func)
{
	if (!curve_is_point_on_curve(curve, Q)) {
		return 0, error("invalid public key, point is not on curve");
	}

	var r = sig[0];
	var s = sig[1];

	if (bigint_gt(r, curve->CURVE_q) || bigint_lt(r, bigint(1))) {
		return 0, error("invalid signature: r is not a positive integer smaller than the curve order");
	}

	if (bigint_gt(s, curve->CURVE_q) || bigint_lt(s, bigint(1))) {
		return 0, error("invalid signature: s is not a positive integer smaller than the curve order");
	}

	var hashed = hash_func(msg);
	var order_bits = bigint_get_bitsize(curve->CURVE_q);
	var digest_bits = length(hashed) * 8;
	var e = bigint_bytes_BE(hashed);
	if (digest_bits > order_bits) {
		e = bigint_shr(e, digest_bits - order_bits);
	}

	var w = bigint_modinverse(s, curve->CURVE_q);
	var u1 = bigint_mod(bigint_mul(e, w), curve->CURVE_q);
	var u2 = bigint_mod(bigint_mul(r, w), curve->CURVE_q);

	var tmp = shamirs_trick([curve->CURVE_gx, curve->CURVE_gy], u1, Q, u2, curve);
	tmp->POINT_x = bigint_mod(tmp->POINT_x, curve->CURVE_q);

	return (tmp->POINT_x == r);
}

function @shamirs_trick(point1, scalar1, point2, scalar2, curve)
{
	var sum = point_add(point1, point2, curve);

	var scalar1_bits = bigint_get_bitsize(scalar1);
	var scalar2_bits = bigint_get_bitsize(scalar2);
	var l = max(scalar1_bits, scalar2_bits) - 1;

	var out = [0, 0];

	var bitset1 = bigint_is_bit_set(scalar1, l);
	var bitset2 = bigint_is_bit_set(scalar2, l);

	if (bitset1 && bitset2) {
		out->POINT_x = sum->POINT_x;
		out->POINT_y = sum->POINT_y;
	}
	else if (bitset1) {
		out->POINT_x = point1->POINT_x;
		out->POINT_y = point1->POINT_y;
	}
	else if (bitset2) {
		out->POINT_x = point2->POINT_x;
		out->POINT_y = point2->POINT_y;
	}
	else {
		out->POINT_x = bigint(0);
		out->POINT_y = bigint(0);
	}

	var tmp = [0, 0];
	for (l = l-1; l>=0; l--) {
		tmp->POINT_x = out->POINT_x;
		tmp->POINT_y = out->POINT_y;
		out = point_double(tmp, curve);

		tmp->POINT_x = out->POINT_x;
		tmp->POINT_y = out->POINT_y;
	
		bitset1 = bigint_is_bit_set(scalar1, l);
		bitset2 = bigint_is_bit_set(scalar2, l);
		if (bitset1 && bitset2) {
			out = point_add(tmp, sum, curve);
		}
		else if (bitset1) {
			out = point_add(tmp, point1, curve);
		}
		else if (bitset2) {
			out = point_add(tmp, point2, curve);
		}
	}

	return out;
}

function @point_add(op1, op2, curve)
{
	var ydiff = bigint_sub(op2->POINT_y, op1->POINT_y);
	var xdiff = bigint_sub(op2->POINT_x, op1->POINT_x);
	xdiff = bigint_modinverse(xdiff, curve->CURVE_p);
	var lambda = bigint_mod(bigint_mul(ydiff, xdiff), curve->CURVE_p);

	var x = bigint_mod(bigint_sub(bigint_sub(bigint_mul(lambda, lambda), op1->POINT_x), op2->POINT_x), curve->CURVE_p);
	var y = bigint_mod(bigint_sub(bigint_mul(bigint_sub(op1->POINT_x, x), lambda), op1->POINT_y), curve->CURVE_p);
	return [x, y];
}

function @point_double(op, curve)
{
	var numer = bigint_mul(op->POINT_x, op->POINT_x);
	numer = bigint_mul(numer, bigint(3));
	numer = bigint_add(numer, curve->CURVE_a);
	var denom = bigint_mul(op->POINT_y, bigint(2));
	denom = bigint_modinverse(denom, curve->CURVE_p);
	var lambda = bigint_mul(numer, denom);
	lambda = bigint_mod(lambda, curve->CURVE_p);

	var x = bigint_mod(bigint_sub(bigint_sub(bigint_mul(lambda, lambda), op->POINT_x), op->POINT_x), curve->CURVE_p);
	var y = bigint_mod(bigint_sub(bigint_mul(bigint_sub(op->POINT_x, x), lambda), op->POINT_y), curve->CURVE_p);
	return [x, y];
}

function @point_mul(point, scalar, curve)
{
	var R0 = [point->POINT_x, point->POINT_y];
	var R1 = point_double(point, curve);
	var tmp = [0, 0];

	var dbits = bigint_get_bitsize(scalar);
	//log({"dbits=", dbits});
	for (var i=dbits-2; i>=0; i--) {
		if (bigint_is_bit_set(scalar, i)) {
			tmp->POINT_x = R0->POINT_x;
			tmp->POINT_y = R0->POINT_y;
			R0 = point_add(R1, tmp, curve);
			tmp->POINT_x = R1->POINT_x;
			tmp->POINT_y = R1->POINT_y;
			R1 = point_double(tmp, curve);
		}
		else {
			tmp->POINT_x = R1->POINT_x;
			tmp->POINT_y = R1->POINT_y;
			R1 = point_add(R0, tmp, curve);
			tmp->POINT_x = R0->POINT_x;
			tmp->POINT_y = R0->POINT_y;
			R0 = point_double(tmp, curve);
		}
	}
	return R0;
}

function @gen_private_key(curve)
{
	var order_bits = bigint_get_bitsize(curve->CURVE_q);
	var order_bytes = (order_bits + 7) / 8;
	var extra_bits = order_bytes * 8 - order_bits;

	var rand;
	do {
		rand = bigint_bytes_BE(crypto_random(order_bytes));
		if (extra_bits > 0) {
			rand = bigint_shr(rand, extra_bits);
		}
	}
	while (bigint_ge(rand, curve->CURVE_q));

	return rand;
}

function @get_public_key(d, curve)
{
	return point_mul([curve->CURVE_gx, curve->CURVE_gy], d, curve);
}

function @get_curve(type)
{
	if (!curve_p256) {
		init_curves();
	}
	switch (type) {
		case CURVE_P256: return curve_p256;
		case CURVE_P384: return curve_p384;
	}
	return 0, error("unknown curve type");
}

function ecdh_gen_private_key(type)
{
	if (type == CURVE_X25519) {
		return crypto_random(32);
	}
	var curve = get_curve(type);
	return gen_private_key(curve);
}

function ecdh_calc_public_key(type, priv)
{
	if (type == CURVE_X25519) {
		return ecdh_calc_public_key_x25519(priv);
	}
	var curve = get_curve(type);
	return get_public_key(priv, curve);
}

function ecdh_calc_secret(type, priv, other_pub)
{
	if (type == CURVE_X25519) {
		return ecdh_calc_secret_x25519(priv, other_pub);
	}
	var curve = get_curve(type);
	return bigint_to_bytes_BE(point_mul(other_pub, priv, curve)->POINT_x);
}

function @init_curves()
{
	curve_p256 = [
		bigint_str("115792089210356248762697446949407573530086143415290314195533631308867097853951"),
		bigint_str("-3"),
		bigint_str("41058363725152142129326129780047268409114441015993725554835256314039467401291"),
		bigint_str("115792089210356248762697446949407573529996955224135760342422259061068512044369"),
		bigint_str("48439561293906451759052585252797914202762949526041747995844080717082404635286"),
		bigint_str("36134250956749795798585127919587881956611106672985015071877198253568414405109")
	];
	curve_p384 = [
		bigint_str("39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319"),
		bigint_str("-3"),
		bigint_str("27580193559959705877849011840389048093056905856361568521428707301988689241309860865136260764883745107765439761230575"),
		bigint_str("39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643"),
		bigint_str("26247035095799689268623156744566981891852923491109213387815615900925518854738050089022388053975719786650872476732087"),
		bigint_str("8325710961489029985546751289520108179287853048861315594709205902480503199884419224438643760392947333078086511627871")
	];
}

function @assert(value, result)
{
	if (value != result) {
		return 0, error({"assert failed (expected ", result, " but got ", value, ")"});
	}
}

function @test_p256()
{
	var S = [bigint_hex("de2444bebc8d36e682edd27e0f271508617519b3221a8fa0b77cab3989da97c9"),
	         bigint_hex("c093ae7ff36e5380fc01a5aad1e66659702de80f53cec576b6350b243042a256")];
	var d = bigint_hex("c51e4753afdec1e6b6c6a5b992f43f8dd0c7a8933072708b6522468b2ffb06fd");
	var expected = [bigint_hex("51d08d5f2d4278882946d88d83c97d11e62becc3cfc18bedacc89ba34eeca03f"),
	                bigint_hex("75ee68eb8bf626aa5b673ab51f6e744e06f8fcf8a6c0cf3035beca956a7b41d5")];
	
	perf_reset();
	var R = point_mul(S, d, curve_p256);
	perf_log("mul");
	assert(R, expected);

	var Q = [bigint_hex("8101ece47464a6ead70cf69a6e2bd3d88691a3262d22cba4f7635eaff26680a8"),
	         bigint_hex("d8a12ba61d599235f67d9cb4d58f1783d3ca43e78f0a5abaa624079936c0c3a9")];
	var msg = "This is only a test message. It is 48 bytes long";
	var sig = [bigint_hex("7214bc9647160bbd39ff2f80533f5dc6ddd70ddf86bb815661e805d5d4e6f27c"),
	           bigint_hex("7d1ff961980f961bdaa3233b6209f4013317d3e3f9e1493592dbeaa1af2bc367")];
	var result = verify(sig, msg, Q, curve_p256, sha256#1);
	assert(result, true);
	perf_log("verify");
}

function @test_p384()
{
	var S = [bigint_hex("fba203b81bbd23f2b3be971cc23997e1ae4d89e69cb6f92385dda82768ada415ebab4167459da98e62b1332d1e73cb0e"),
	         bigint_hex("5ffedbaefdeba603e7923e06cdb5d0c65b22301429293376d5c6944e3fa6259f162b4788de6987fd59aed5e4b5285e45")];
	var d = bigint_hex("a4ebcae5a665983493ab3e626085a24c104311a761b5a8fdac052ed1f111a5c44f76f45659d2d111a61b5fdd97583480");
	var expected = [bigint_hex("e4f77e7ffeb7f0958910e3a680d677a477191df166160ff7ef6bb5261f791aa7b45e3e653d151b95dad3d93ca0290ef2"),
	                bigint_hex("ac7dee41d8c5f4a7d5836960a773cfc1376289d3373f8cf7417b0c6207ac32e913856612fc9ff2e357eb2ee05cf9667f")];
	
	perf_reset();
	var R = point_mul(S, d, curve_p384);
	perf_log("mul");
	assert(R, expected);
}

function test_ecdsa()
{
	init_curves();

	test_p256();
	test_p384();
}
