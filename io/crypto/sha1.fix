/*
 * FixBrowser v0.1 - https://www.fixbrowser.org/
 * Copyright (c) 2018-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

const {
	@STATE_total_lo = 5,
	@STATE_total_hi,
	@STATE_buf,
	@STATE_pos
};

function sha1_init()
{
	var buf = [];
	array_set_length(buf, 64);
	return [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0, 0, 0, buf, 0];
}

function sha1_copy(state)
{
	return clone_deep(state);
}

function sha1_process(state, buf, off, len)
{
	var (lo, c1) = add32(state->STATE_total_lo, len << 3);
	var (hi, c2) = add32(state->STATE_total_hi, len >>> 29, c1);
	if (c2) return 0, error("message too long");
	state->STATE_total_lo = lo;
	state->STATE_total_hi = hi;

	var state_buf = state->STATE_buf;
	var pos = state->STATE_pos;
	if (pos > 0) {
		var num = min(64 - pos, len);
		array_copy(state_buf, pos, buf, off, num);
		pos += num;
		off += num;
		len -= num;
		if (pos < 64) {
			state->STATE_pos = pos;
			return;
		}
		crypto_sha1(state, state_buf, 0);
	}

	while (len >= 64) {
		crypto_sha1(state, buf, off);
		off += 64;
		len -= 64;
	}

	array_copy(state_buf, 0, buf, off, len);
	state->STATE_pos = len;
}

function sha1_finish(state)
{
	var buf = state->STATE_buf;
	var pos = state->STATE_pos;
	buf[pos++] = 0x80;
	if (pos > 56) {
		while (pos < 64) {
			buf[pos++] = 0;
		}
		crypto_sha1(state, buf, 0);
		array_fill(buf, 0, 64, 0);
	}
	else {
		while (pos < 56) {
			buf[pos++] = 0;
		}
	}

	var total_lo = state->STATE_total_lo;
	var total_hi = state->STATE_total_hi;
	buf[56] = total_hi >>> 24;
	buf[57] = (total_hi >>> 16) & 0xFF;
	buf[58] = (total_hi >>> 8) & 0xFF;
	buf[59] = total_hi & 0xFF;
	buf[60] = total_lo >>> 24;
	buf[61] = (total_lo >>> 16) & 0xFF;
	buf[62] = (total_lo >>> 8) & 0xFF;
	buf[63] = total_lo & 0xFF;
	crypto_sha1(state, buf, 0);

	var h0 = state[0];
	var h1 = state[1];
	var h2 = state[2];
	var h3 = state[3];
	var h4 = state[4];
	return [
		h0 >>> 24, (h0 >>> 16) & 0xFF, (h0 >>> 8) & 0xFF, h0 & 0xFF,
		h1 >>> 24, (h1 >>> 16) & 0xFF, (h1 >>> 8) & 0xFF, h1 & 0xFF,
		h2 >>> 24, (h2 >>> 16) & 0xFF, (h2 >>> 8) & 0xFF, h2 & 0xFF,
		h3 >>> 24, (h3 >>> 16) & 0xFF, (h3 >>> 8) & 0xFF, h3 & 0xFF,
		h4 >>> 24, (h4 >>> 16) & 0xFF, (h4 >>> 8) & 0xFF, h4 & 0xFF
	];
}

function sha1(buf)
{
	return sha1(buf, 0, length(buf));
}

function sha1(buf, off, len)
{
	var state = sha1_init();
	sha1_process(state, buf, off, len);
	return sha1_finish(state);
}

function @to_hex(value)
{
	var hex = {""};
	var len = length(value);
	for (var i=0; i<len; i++) {
		var b = value[i];
		var hi = b >>> 4;
		var lo = b & 0xF;
		hex[] = hi >= 10? hi - 10 + 'a' : hi + '0';
		hex[] = lo >= 10? lo - 10 + 'a' : lo + '0';
	}
	return hex;
}

function @assert(value, result)
{
	if (value != result) {
		return 0, error({"assert failed (expected ", result, " but got ", value, ")"});
	}
}

function test_sha1()
{
	assert(to_hex(sha1("")), "da39a3ee5e6b4b0d3255bfef95601890afd80709");
	assert(to_hex(sha1("The quick brown fox jumps over the lazy dog")), "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12");
	assert(to_hex(sha1("The quick brown fox jumps over the lazy cog")), "de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3");

	var s = {"The quick brown fox jumps over the lazy dogXXXXXXXXXXX"};
	assert(length(s), 54);
	assert(to_hex(sha1(s)), "3c79d011bd54d055fe16d3a8cb84a9ec845f4ef9");

	s[] = 'X';
	assert(length(s), 55);
	assert(to_hex(sha1(s)), "883cefac68015fa94ee8780dbbac3fc8550108df");

	s[] = 'X';
	assert(length(s), 56);
	assert(to_hex(sha1(s)), "a9c5a8b80b13c16d6de63ea6aa3cd0941466b846");

	s[] = 'X';
	assert(length(s), 57);
	assert(to_hex(sha1(s)), "4ff515472065b961f9ddcb2619e631ec50d995a5");

	s = "The quick brown fox jumps over the lazy dog";
	s = {s, s, s, s};
	s = {s, s, s, s};
	assert(length(s), 43*16);
	assert(to_hex(sha1(s)), "387f3affcf11b3b0541f3c0ef6539477db4f993d");
}
